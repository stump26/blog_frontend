{"ast":null,"code":"import _regeneratorRuntime from \"/mnt/c/Users/moidp/CloudStation/sangwook/Programing/project/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/mnt/c/Users/moidp/CloudStation/sangwook/Programing/project/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport express from 'express';\nimport { StaticRouter } from 'react-router-dom';\nimport App from '../App.jsx';\nimport path from 'path'; // import { PreloadContext } from '../context';\n\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server'; // asset-manifest.json 에서 파일 경로들을 조회합니다.\n\nvar statsFile = path.resolve('./build/loadable-stats.json');\n\nfunction createPage(root, tags) {\n  return \"<!DOCTYPE html>\\n  <html lang=\\\"en\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <link rel=\\\"shortcut icon\\\" href=\\\"/favicon.ico\\\" />\\n    <meta\\n      name=\\\"viewport\\\"\\n      content=\\\"width=device-width,initial-scale=1,shrink-to-fit=no\\\"\\n    />\\n    <meta name=\\\"theme-color\\\" content=\\\"#000000\\\" />\\n    <title>React App</title>\\n    \".concat(tags.styles, \"\\n    \").concat(tags.links, \"\\n  </head>\\n  <body>\\n    <noscript>You need to enable JavaScript to run this app.</noscript>\\n    <div id=\\\"root\\\">\\n      \").concat(root, \"\\n    </div>\\n    \").concat(tags.scripts, \"\\n  </body>\\n  </html>\\n    \");\n}\n\nvar app = express(); // 서버사이드 렌더링을 처리 할 핸들러 함수입니다.\n\nvar serverRender =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(req, res, next) {\n    var context, preloadContext, extractor, jsx, root, tags;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // 이 함수는 404가 떠야 하는 상황에 404를 띄우지 않고 서버사이드 렌더링을 해줍니다.\n            context = {};\n            preloadContext = {\n              done: false,\n              promises: []\n            }; // 필요한 파일 추출하기 위한 ChunkExtractor\n\n            extractor = new ChunkExtractor({\n              statsFile: statsFile\n            });\n            jsx = React.createElement(ChunkExtractorManager, {\n              extractor: extractor\n            }, React.createElement(StaticRouter, {\n              location: req.url,\n              context: context\n            }, React.createElement(App, null)));\n            ReactDOMServer.renderToStaticMarkup(jsx); // renderToStaticMarkup 으로 한번 렌더링합니다.\n\n            _context.prev = 5;\n            _context.next = 8;\n            return Promise.all(preloadContext.promises);\n\n          case 8:\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](5);\n            return _context.abrupt(\"return\", res.status(500));\n\n          case 13:\n            preloadContext.done = true;\n            root = ReactDOMServer.renderToString(jsx); // 렌더링을 합니다.\n            // 미리 불러와야 하는 스타일 / 스크립트를 추출하고\n\n            tags = {\n              scripts: extractor.getScriptTags(),\n              // 스크립트 앞부분에 리덕스 상태 넣기\n              links: extractor.getLinkTags(),\n              styles: extractor.getStyleTags()\n            };\n            res.send(createPage(root, tags)); // 결과물을 응답합니다.\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[5, 10]]);\n  }));\n\n  return function serverRender(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar serve = express.static(path.resolve('./build'), {\n  index: false // \"/\" 경로에서 index.html 을 보여주지 않도록 설정\n\n});\napp.use(serve); // 순서가 중요합니다. serverRender 전에 위치해야 합니다.\n\napp.use(serverRender); // 5000 포트로 서버를 가동합니다.\n\napp.listen(5000, function () {\n  console.log('Running on http://localhost:5000');\n});","map":null,"metadata":{},"sourceType":"module"}