{"ast":null,"code":"import _defineProperty from \"/mnt/c/Users/moidp/CloudStation/sangwook/Programing/project/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/mnt/c/Users/moidp/CloudStation/sangwook/Programing/project/blog/blog-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport ApolloClient from 'apollo-client';\nimport { ApolloLink } from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { setContext } from 'apollo-link-context';\nvar uri = process.env.REACT_APP_BACKEND_HOST + '/graphql'; // console.log('TCL: uri', uri);\n// const httpLink = new HttpLink({\n// \turi,\n// });\n\nvar authLink = setContext(function (_, _ref) {\n  var headers = _ref.headers,\n      context = _objectWithoutProperties(_ref, [\"headers\"]);\n\n  // get the authentication token from local storage if it exists\n  var token = sessionStorage.getItem('token'); // console.log('TCL: authLink -> token', token);\n  // return the headers to the context so httpLink can read them\n\n  return _objectSpread({\n    headers: _objectSpread({}, headers, {\n      authorization: token ? \"Bearer \".concat(token) : ''\n    })\n  }, context);\n});\nvar uploadLink = createUploadLink({\n  uri: uri\n});\nvar link = ApolloLink.from([authLink, uploadLink]);\nvar client = new ApolloClient({\n  uri: uri,\n  link: link,\n  cache: new InMemoryCache()\n});\nexport default client;","map":null,"metadata":{},"sourceType":"module"}